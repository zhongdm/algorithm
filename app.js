const express = require('express')
const Stack = require('./src/class/stack.js')
const PriorityQueue  = require('./src/class/priorityQueue.js')
const LoopQueue = require('./src/class/loopQueue.js')
const LinkedList = require('./src/class/linkedList.js')
const Set = require('./src/class/set')
const Dictionary = require('./src/class/dictionary')
const HashMap = require('./src/class/hashMap')
const HashMapSeperate = require('./src/class/hashMap_seperate_chaining')
const BinarySearchTree = require('./src/class/binarySearchTree')
const RedBlackTree = require('./src/class/redBlackTree')
const app = express()

app.use(express.static('src'))
app.get('/', (req, res) => {
  const stack = new Stack()
  stack.push('111')
  stack.push('222')
  // res.send(stack)

  const pQueue = new PriorityQueue()
  pQueue.enqueue('qqq', 1)
  pQueue.enqueue('qqq2', 13)
  pQueue.enqueue('qqq3', 2)
  // res.send(pQueue+ "   " + pQueue.isEmpty)

  const loopQueue = new LoopQueue()
  loopQueue.enqueue('a1')
  loopQueue.enqueue('a2')
  loopQueue.enqueue('a3')
  loopQueue.enqueue('a4')

  const linkedList = new LinkedList()
  linkedList.append('hello')
  linkedList.append('world')
  linkedList.insertNode(1, 'and')
  linkedList.insertNode(0, 'first')
  // linkedList.removeAt(0)
  linkedList.removeNode('hello')

  const set = new Set()
  set.add(1)
  set.add(3)
  const set2 = new Set()
  set2.add(11)
  set2.add(3)
  set2.add(1)
  let unionset = set.union(set2)
  let inSet = set.intersetion(set2)
  let dfSet = set.difference(set2)
  let subSet = set.subset(set2)

  const dict = new Dictionary()
  dict.set('first', 'michale')
  dict.set('second', 'hello')
  dict.remove('second')

  const hm = new HashMap()
  hm.put('2', '1231')
  hm.put('21', '12311')
  hm.remove('2')

  const hms = new HashMapSeperate()
  hms.put('Mindy', 'Mindy1')
  hms.put('Paul', 'Paul1')
  hms.put('Oaum', 'Pauljkeid')
  let res1 = hms.get('Paul')
  res1 = res1 + '   '+hms.get('Mindy') + '  '+hms.get('Oaum') + ' '+hms.get('Oaum1')
  
  const bst = new BinarySearchTree()
  bst.insert(11)
  bst.insert(110)
  bst.insert(9)
  bst.insert(3)
  bst.insert(4)
  bst.insert(5)
  bst.insert(10)
  // bst.insert(120)

  // bst.preTranverse(value => console.log(value))
  // bst.midTranverse(value => console.log(value))
  // bst.nextTranverse(value => console.log(value))
  let s = ''
  s = bst.getMaxValue()
  s = bst.getMinValue()
  s = bst.depth
  s = bst.search(9)

  
  const rbTree = new RedBlackTree()
  rbTree.insert(11)
  rbTree.insert(110)
  rbTree.insert(9)
  rbTree.insert(3)
  rbTree.insert(5)
  rbTree.insert(4)
  rbTree.insert(7)
  rbTree.insert(6)
  rbTree.insert(8)
  let mid = rbTree
  let newTree = rbTree.leftRotate(rbTree.search(5))
  // console.log('tag', mid.head.prev.prev, newTree.prev.prev)
  res.send(mid)
})

app.listen(3030, () => {console.log('example is running on port 3030')})
